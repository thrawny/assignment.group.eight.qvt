modeltype Workflow uses workflowengine('http://workflowengine/1.0');
modeltype Petrinet uses petrinet('chalmers.se/cse/mde2014');

transformation Workflow(in source:Workflow, out target:Petrinet);


main() {
	var globalNet := source.rootObjects()[Workflow::Case]->map case2petriNet();
}

mapping Workflow::Case::case2petriNet() : PetriNet {
	name := "GlobalNet";
	arcs := self.map transition2arc(self.allInstances(Entity), result);
}

mapping Workflow::Case::transition2arc(in entities: Set(Entity), globalNet : PetriNet) : OrderedSet(Petrinet::Arc) {
	entities -> forEach(en1){
		entities -> forEach(en2){
			if en1 <> en2 then{
				en1.outgoing_transitions -> forEach(tran1){
					en2.incoming_transitions -> forEach(tran2){
						if tran1 = tran2
						then {
							var tmpArc :  Arc := new Arc();
							tmpArc.net := globalNet;
							if en1.oclIsKindOf(Controller) 	then {
								tmpArc.source := en1.oclAsType(Controller).map controller2tran(globalNet);
							} else if en1.oclIsKindOf(Task) then {
								tmpArc.source := en1.oclAsType(Task).map task2place(globalNet);
							} else if en1.oclIsKindOf(StartPoint)  then {
								tmpArc.source := en1.oclAsType(StartPoint).map sp2place(globalNet);
							} else {
								tmpArc.source := en1.oclAsType(EndPoint).map ep2place(globalNet);
							}
							endif endif endif;
							
							if en2.oclIsKindOf(Controller) 	then {
								tmpArc.target := en2.oclAsType(Controller).map controller2tran(globalNet);
							} else if en2.oclIsKindOf(Task) then {
								tmpArc.target := en2.oclAsType(Task).map task2place(globalNet);
							} else if en2.oclIsKindOf(StartPoint)  then {
								tmpArc.target := en2.oclAsType(StartPoint).map sp2place(globalNet);
							} else {
								tmpArc.target := en2.oclAsType(EndPoint).map ep2place(globalNet);
							}
							endif endif endif;
							log("Source: "+en1.entity_id+" Target: "+en2.entity_id)
						}
						endif
					}
				}
			} endif
		}
	
	}
}

mapping Controller:: controller2tran(in globalNet : PetriNet) : Petrinet::Transition {
	result.name := self.entity_id;
	result.net := globalNet;
	if self.oclIsKindOf(Selection) 	then {
		result.transition_type := petrinet::Type::Selection;
	} else if self.oclIsKindOf(Synchronization) then {
		result.transition_type := petrinet::Type::Synchronization;
	} else if self.oclIsKindOf(FIFO)  then {
		result.transition_type := petrinet::Type::FIFO;
	} else if self.oclIsKindOf(Iteration) then {
		result.transition_type := petrinet::Type::Iteration;
	} else {
		result.transition_type := petrinet::Type::Fork;
	}
	endif endif endif endif;
}

mapping Task::task2place(in globalNet : PetriNet) : Petrinet::Place {
	result.name := self.entity_id;
	result.net := globalNet;
}


mapping StartPoint::sp2place(in globalNet : PetriNet) : Petrinet::Place {
	result.name := self.entity_id;
	result.net := globalNet;	
}

mapping EndPoint::ep2place(in globalNet : PetriNet) : Petrinet::Place {
	result.name := self.entity_id;
	result.net := globalNet;
}

